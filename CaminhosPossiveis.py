class Grafo:
    def __init__(self, grafo):
        self.grafo = grafo

    def dfs_util(self, v, destino, visitados, caminho_atual, caminhos):
        visitados[v] = True
        caminho_atual.append(v)

        if v == destino:
            caminhos.append(list(caminho_atual))
        else:
            for i in self.grafo[v]:
                if not visitados[i]:
                    self.dfs_util(i, destino, visitados, caminho_atual, caminhos)

        caminho_atual.pop()
        visitados[v] = False

    def encontrar_caminhos(self, inicio, destino):
        visitados = [False] * (max(self.grafo.keys()) + 1)
        caminhos = []
        caminho_atual = []

        self.dfs_util(inicio, destino, visitados, caminho_atual, caminhos)

        return caminhos

if __name__ == "__main__":
    grafo_exemplo = {
        1: [3],
        3: [4, 5, 6, 7, 8],
        4: [9],
        5: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        6: [18, 19, 21],
        7: [18, 19, 22],
        8: [3],
        9: [23, 24],
        10: [19, 18, 25],
        11: [26, 27, 28, 29, 30, 31, 32, 19, 18],
        12: [19, 18, 33],
        13: [19, 18, 34],
        14: [35, 36, 37, 38, 39, 19, 40, 18],
        15: [41, 42, 43, 44, 45, 46, 47, 48, 19, 49, 18],
        16: [50, 51, 52, 53, 54, 55, 56, 19, 57, 18],
        17: [19, 18, 58],
        18: [59, 60],
        19: [4, 5, 6, 7, 61],
        20: [5],
        21: [6],
        22: [7],
        23: [62, 63],
        24: [9],
        25: [10],
        26: [19, 18, 64],
        27: [19, 18, 65],
        28: [19, 18, 66],
        29: [19, 18, 67],
        30: [18, 19, 68],
        31: [19, 18, 69],
        32: [11],
        33: [12],
        34: [13],
        35: [19, 18, 70],
        36: [19, 18, 71],
        37: [19, 18, 72],
        38: [19, 18, 73],
        39: [19, 18, 74],
        40: [14],
        41: [19, 18, 75],
        42: [19, 18, 76],
        43: [19, 18, 77],
        44: [19, 18, 78],
        45: [19, 18, 79],
        46: [19, 18, 80],
        47: [19, 81, 82],
        48: [19, 18, 83],
        49: [15],
        50: [19, 18, 84],
        51: [19, 18, 85],
        52: [19, 18, 86],
        53: [19, 18, 87],
        54: [19, 18, 88],
        55: [19, 18, 89],
        56: [19, 18, 90],
        57: [16],
        58: [17],
        59: [2],
        60: [18],
        61: [19],
        62: [91, 92],
        63: [23],
        64: [26],
        65: [27],
        66: [28],
        67: [29],
        68: [30],
        69: [31],
        70: [35],
        71: [36],
        72: [37],
        73: [38],
        74: [39],
        75: [41],
        76: [42],
        77: [43],
        78: [19, 60, 78],
        79: [45],
        80: [46],
        81: [93, 94],
        82: [47],
        83: [48],
        84: [50],
        85: [51],
        86: [52],
        87: [53],
        88: [54],
        89: [55],
        90: [56],
        2: [59, 93, 99, 155, 158, 160, 163, 165, 167],
        91: [95],
        92: [96],
        93: [2],
        94: [81],
        95: [97, 98],
        96: [99, 100],
        97: [101, 102],
        98: [103],
        99: [2],
        100: [96],
        101: [104],
        102: [97],
        103: [105, 106],
        104: [107, 108],
        105: [109, 110],
        106: [103],
        107: [111, 112],
        108: [104],
        109: [113, 114],
        110: [105],
        111: [115, 116],
        112: [107],
        113: [117, 118],
        114: [109],
        115: [119, 120],
        116: [111],
        117: [121, 122, 123, 124],
        118: [113],
        119: [125, 126, 127, 128],
        120: [115],
        121: [129, 130],
        122: [131, 132],
        123: [133, 134],
        124: [117],
        125: [135, 136],
        126: [137, 138],
        127: [139, 140],
        128: [119],
        129: [129, 141],
        130: [121],
        131: [142, 143],
        132: [122],
        133: [133, 144],
        134: [123],
        135: [135, 145],
        136: [125],
        137: [146, 147],
        138: [126],
        139: [139, 148],
        140: [127],
        141: [141, 149],
        142: [142, 150],
        143: [131],
        144: [144, 151],
        145: [145, 152],
        146: [146, 153],
        147: [137],
        148: [148, 154],
        149: [155, 156],
        150: [150, 157],
        151: [158, 159],
        152: [160, 161],
        153: [153, 162],
        154: [163, 164],
        155: [2],
        156: [149],
        157: [165, 166],
        158: [2],
        159: [151],
        160: [2],
        161: [152],
        162: [167, 168],
        163: [2],
        164: [154],
        165: [2],
        166: [157],
        167: [162, 2],
        168: [162]
    }

    grafo = Grafo(grafo_exemplo)
    inicio = 1
    destino = 2
    caminhos = grafo.encontrar_caminhos(inicio, destino)

    for caminho in caminhos:
        with open("./files/plan-traces.txt", "a") as arquivo:
	        arquivo.write(":".join(map(str, caminho))+"\n")


